#include<iostream>
#include<cstdio>
#include<stack>
#include<queue> 
#include<cstring>
#include<map>
using namespace std;
struct node{
	int num;     //操作数 
	char op;        //操作符 
	bool flag;      //true表示操作数，false表示操作符 
};

string str;
stack<node> s;      //操作符栈
queue<node> q;      //后缀表达式序列
map<char,int> op;   //映射操作符优先级  
void change(){      //将中缀表达式变为后缀表达式 
//从左至右扫描表达式，如果碰到操作数，加入后缀表达式
//如果碰到操作符op，若op优先级低于操作符栈栈顶元素优先级，就将该栈顶元素加入后缀表达式；否则op入操作符栈 
//重复上述操作，知道扫描完毕，若此时操作符栈中还有圆度，则将他们一依次弹出至后缀表达式中 
	int num;
	node temp;
	for(int i=0;i<str.length();){
		if(str[i]<='9'&&str[i]>='0'){
			temp.flag=true;
			temp.num=str[i++]-'0';    //记录该操作数的最高位的数 
			while(i<str.length()&&str[i]>='0'&&str[i]<='9'){    //更新得到正确的操作数 
				temp.num=temp.num*10+(str[i]-'0');
				i++;
			}
			q.push(temp);//将操作数压入后缀表达式队列 
		}
		else{
			temp.flag=false;
			//只要操作符栈的栈顶元素比该操作符优先级高就将栈顶元素弹出到后缀表达式队列中 
			while(!s.empty()&&op[str[i]]<=op[s.top().op]) {
				q.push(s.top());
				s.pop();
			} 
			temp.op=str[i];
			s.push(temp);
			i++;
		}
	}
	while(!s.empty()){
		q.push(s.top());
		s.pop();
	} 
} 

int cal(){
	int temp1,temp2;
	node cur,temp;
	while(!q.empty()){
		cur=q.front();
		q.pop();
		if(cur.flag==true) s.push(cur);    //若果是操作数，直接压入栈 
		else{
			temp2=s.top().num;      // 弹出第二操作数 
			s.pop();
			temp1= s.top().num;     //弹出第一操作数 
			s.pop();
			temp.flag=true;        //临时记录操作数 
			if(cur.op=='+')  temp.num =temp1+temp2;
			else if(cur.op=='-')  temp.num=temp1-temp2;
			else if(cur.op=='*')  temp.num=temp1*temp2;
			else temp.num=temp1/temp2;
			s.push(temp);
		}
	} 
	return s.top().num; 
}
 
int main(){
	op['+']=op['-']=1;
	op['*']=op['/']=2;
	while(getline(cin,str),str!="0"){
		for(string::iterator it=str.end();it!=str.begin();it--){
			if(*it==' ') str.erase(it); 
		} 
		while(!s.empty()) s.pop();   //初始化栈 
		change();
		printf("%d\n",cal());
	}
	return 0;
}
